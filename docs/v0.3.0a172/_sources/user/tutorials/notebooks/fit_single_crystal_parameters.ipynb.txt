{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0227ddf8-a43c-4487-a896-175d8f2c824e",
   "metadata": {},
   "source": [
    "\n",
    "# Fitting single crystal parameters with DAMASK simulations\n",
    "This notebook processes the results from the demo workflow `fit_single_crystal_parameters`, and generates a plot of stress strain both simulated and experimental, showing the model converging on the desired deformation behavior with each pertubation of the plastic single crystal parameters.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4fe0f116-af9c-434b-9457-228b239ab801",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import matflow as mf\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from pathlib import Path\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3daf19ff-af46-4b04-a6c5-dfc9959e1063",
   "metadata": {},
   "source": [
    "## Utility functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "98425fdb-e6c3-43c1-96b2-4af9bbdc2a52",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [],
   "source": [
    "def clean_nonetypes(stress_array, strain_array):\n",
    "    \"\"\"\n",
    "    For some reason experimental data has nonetypes:\n",
    "    This function cleans the stress array of nonetypes\n",
    "    and also ensures the strain array is matched to it.\n",
    "    \"\"\"\n",
    "    # DEBUG\n",
    "    # print(f\"input array : {stress_array}\")\n",
    "    # print(f\"bool array of nonetypes : {stress_array != np.array(None)}\")\n",
    "    \n",
    "    cleaned_stress_array = stress_array[stress_array != np.array(None)]\n",
    "    cleaned_strain_array = strain_array[stress_array != np.array(None)]\n",
    "\n",
    "    return cleaned_stress_array, cleaned_strain_array\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "decd5ae3-44ef-44b5-ae65-72130db3cb58",
   "metadata": {},
   "source": [
    "## Define workflow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b8d7257f-63f5-406c-8a0c-5b30d69d1213",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "workflow_path = Path(\"fit_single_crystal_parameters_2025-05-28_143539\")\n",
    "workflow = mf.Workflow(workflow_path)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f6640da-c555-4109-a88e-7304c0f523ce",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "source": [
    "Your workflow output (from `matflow show -f`) should look like this:\n",
    "```\n",
    "┌────┬───────────────────────────────────────────────┬──────────┬────────────────────────────┬────────────────────────────────────────────────┐\n",
    "│ ID │ Name                                          │ Status   │ Times                      │ Actions                                        │\n",
    "├────┼───────────────────────────────────────────────┼──────────┼────────────────────────────┼────────────────────────────────────────────────┤\n",
    "│ 33 │ fit_single_crystal_parameters_2025-05-28_143… │ inactive │  sb.  2025-05-28 14:35:41  │  generate_microstructu…   0 | ■                │\n",
    "│    │                                               │          │  st.             16:36:35  │  generate_volume_eleme…   0 | ■                │\n",
    "│    │                                               │          │  en.             16:36:31  │  read_tensile_test_fro…   0 | ■                │\n",
    "│    │                                               │          │                            │  simulate_VE_loading_d…   0 | ■■■■■■■■■■■■■■   │\n",
    "│    │                                               │          │                            │                           1 | ■■■■■■■■■■■■■■   │\n",
    "│    │                                               │          │                            │                           2 | ■■■■■■■■■■■■■■   │\n",
    "│    │                                               │          │                            │                           3 | ■■■■■■■■■■■■■■   │\n",
    "│    │                                               │          │                            │  fit_single_crystal_pa…   0 | ■■              \n",
    "└────┴───────────────────────────────────────────────┴──────────┴────────────────────────────┴────────────────────────────────────────────────┘\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fcb42ada-098c-4a7b-a2a9-730291c7a71b",
   "metadata": {},
   "source": [
    "## Extract and clean data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fdca31f5-70e6-4822-942e-8f17f0aec052",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true,
     "source_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['_IndexPath1',\n",
       " '_IndexPath2',\n",
       " '_IndexPath3',\n",
       " '_Workflow__EAR_obj_map',\n",
       " '_Workflow__template_components',\n",
       " '_Workflow__wait_for_direct_jobscripts',\n",
       " '_Workflow__wait_for_scheduled_jobscripts',\n",
       " '__annotations__',\n",
       " '__class__',\n",
       " '__delattr__',\n",
       " '__dict__',\n",
       " '__dir__',\n",
       " '__doc__',\n",
       " '__eq__',\n",
       " '__format__',\n",
       " '__ge__',\n",
       " '__getattribute__',\n",
       " '__gt__',\n",
       " '__hash__',\n",
       " '__init__',\n",
       " '__init_subclass__',\n",
       " '__le__',\n",
       " '__lt__',\n",
       " '__module__',\n",
       " '__ne__',\n",
       " '__new__',\n",
       " '__reduce__',\n",
       " '__reduce_ex__',\n",
       " '__repr__',\n",
       " '__setattr__',\n",
       " '__sizeof__',\n",
       " '__slots__',\n",
       " '__str__',\n",
       " '__subclasshook__',\n",
       " '__weakref__',\n",
       " '_abort_run',\n",
       " '_accept_pending',\n",
       " '_add_empty_loop',\n",
       " '_add_empty_task',\n",
       " '_add_file',\n",
       " '_add_loop',\n",
       " '_add_parameter_data',\n",
       " '_add_submission',\n",
       " '_add_task',\n",
       " '_add_unset_parameter_data',\n",
       " '_app',\n",
       " '_app_attr',\n",
       " '_check_loop_termination',\n",
       " '_creation_info',\n",
       " '_default_ts_fmt',\n",
       " '_default_ts_name_fmt',\n",
       " '_delete_no_confirm',\n",
       " '_exec_dir_name',\n",
       " '_get_empty_pending',\n",
       " '_get_new_task_unique_name',\n",
       " '_in_batch_mode',\n",
       " '_input_files_dir_name',\n",
       " '_is_tracking_unset',\n",
       " '_loops',\n",
       " '_merged_parameters_cache',\n",
       " '_name',\n",
       " '_pending',\n",
       " '_reject_pending',\n",
       " '_reset_pending',\n",
       " '_resolve_input_source_task_reference',\n",
       " '_resolve_singular_jobscripts',\n",
       " '_set_file',\n",
       " '_store',\n",
       " '_submissions',\n",
       " '_submit',\n",
       " '_tasks',\n",
       " '_template',\n",
       " '_template_components',\n",
       " '_tracked_unset',\n",
       " '_ts_fmt',\n",
       " '_ts_name_fmt',\n",
       " '_use_merged_parameters_cache',\n",
       " '_write_empty_workflow',\n",
       " 'abort_run',\n",
       " 'add_loop',\n",
       " 'add_submission',\n",
       " 'add_task',\n",
       " 'add_task_after',\n",
       " 'add_task_before',\n",
       " 'artifacts_path',\n",
       " 'batch_update',\n",
       " 'cached_merged_parameters',\n",
       " 'cancel',\n",
       " 'check_parameters_exist',\n",
       " 'copy',\n",
       " 'creation_info',\n",
       " 'delete',\n",
       " 'elements',\n",
       " 'ensure_commands_file',\n",
       " 'execute_combined_runs',\n",
       " 'execute_run',\n",
       " 'execution_path',\n",
       " 'from_JSON_file',\n",
       " 'from_JSON_string',\n",
       " 'from_YAML_file',\n",
       " 'from_YAML_string',\n",
       " 'from_file',\n",
       " 'from_template',\n",
       " 'from_template_data',\n",
       " 'get_EAR_IDs_of_tasks',\n",
       " 'get_EAR_skipped',\n",
       " 'get_EARs_from_IDs',\n",
       " 'get_EARs_of_tasks',\n",
       " 'get_all_EARs',\n",
       " 'get_all_element_iterations',\n",
       " 'get_all_elements',\n",
       " 'get_all_parameter_data',\n",
       " 'get_all_parameter_sources',\n",
       " 'get_all_parameters',\n",
       " 'get_all_submission_run_IDs',\n",
       " 'get_element_IDs_from_EAR_IDs',\n",
       " 'get_element_iteration_IDs_from_EAR_IDs',\n",
       " 'get_element_iterations_from_IDs',\n",
       " 'get_element_iterations_of_tasks',\n",
       " 'get_elements_from_IDs',\n",
       " 'get_iteration_task_pathway',\n",
       " 'get_parameter',\n",
       " 'get_parameter_data',\n",
       " 'get_parameter_set_statuses',\n",
       " 'get_parameter_source',\n",
       " 'get_parameter_sources',\n",
       " 'get_parameters',\n",
       " 'get_process_IDs',\n",
       " 'get_run_directories',\n",
       " 'get_running_elements',\n",
       " 'get_running_runs',\n",
       " 'get_scheduler_job_IDs',\n",
       " 'get_store_EARs',\n",
       " 'get_store_element_iterations',\n",
       " 'get_store_elements',\n",
       " 'get_store_tasks',\n",
       " 'get_task_IDs_from_element_IDs',\n",
       " 'get_task_elements',\n",
       " 'get_task_unique_names',\n",
       " 'get_text_file',\n",
       " 'id_',\n",
       " 'input_files_path',\n",
       " 'is_parameter_set',\n",
       " 'list_jobscripts',\n",
       " 'list_task_jobscripts',\n",
       " 'loops',\n",
       " 'name',\n",
       " 'num_EARs',\n",
       " 'num_added_tasks',\n",
       " 'num_element_iterations',\n",
       " 'num_elements',\n",
       " 'num_loops',\n",
       " 'num_submissions',\n",
       " 'num_tasks',\n",
       " 'path',\n",
       " 'process_shell_parameter_output',\n",
       " 'rechunk',\n",
       " 'rechunk_parameter_base',\n",
       " 'rechunk_runs',\n",
       " 'reload',\n",
       " 'resolve_jobscripts',\n",
       " 'save_parameter',\n",
       " 'set_EAR_end',\n",
       " 'set_EAR_skip',\n",
       " 'set_EAR_start',\n",
       " 'set_EARs_initialised',\n",
       " 'set_multi_run_ends',\n",
       " 'set_multi_run_starts',\n",
       " 'set_parameter_value',\n",
       " 'set_parameter_values',\n",
       " 'show_all_EAR_statuses',\n",
       " 'store_format',\n",
       " 'submissions',\n",
       " 'submissions_path',\n",
       " 'submit',\n",
       " 'task_artifacts_path',\n",
       " 'tasks',\n",
       " 'template',\n",
       " 'template_components',\n",
       " 'temporary_rename',\n",
       " 'ts_fmt',\n",
       " 'ts_name_fmt',\n",
       " 'unzip',\n",
       " 'url',\n",
       " 'wait',\n",
       " 'zip']"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# show attrs of workflow obj with dir:\n",
    "dir(workflow)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3b25d2d3-fd05-4e81-b2f5-5f5d38f76fd0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "input array : [None None -34700.0 ... None None None]\n",
      "bool array of nonetypes : [False False  True ... False False False]\n",
      "(171, 3, 3)\n",
      "(171, 3, 3)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "## Experimental Stress-strains ##\n",
    "exp_data = workflow.tasks.read_tensile_test_from_CSV.elements[0].iterations[0].outputs.tensile_test.value\n",
    "exp_stress = np.array(exp_data['true_stress'])\n",
    "exp_strain = np.array(exp_data['true_strain'])\n",
    "# clean experimental data of nonetypes\n",
    "exp_stress, exp_strain = clean_nonetypes(exp_stress, exp_strain)\n",
    "\n",
    "## Simulated stress-strains ##\n",
    "# Getting an error? try running twice.\n",
    "VE_response = workflow.tasks.simulate_VE_loading_damask.elements[0].iterations[0].outputs.VE_response.value\n",
    "sim_stress = np.array(VE_response['volume_data']['vol_avg_stress']['data'])\n",
    "sim_strain = np.array(VE_response['volume_data']['vol_avg_strain']['data'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5c054f2-bdbf-460f-b1d6-dadb43fb51b8",
   "metadata": {},
   "source": [
    "## Plot simulated stress strains against experimental"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acf1578d-9feb-4e16-afc7-374dee565149",
   "metadata": {},
   "source": [
    "It is shown that with successive pertubations of the single crystal parameters `h_0_sl-sl`, `xi_0_sl`, and `xi_inf_sl`, the predicted stress-strain curve approaches the measured stress-strain curve. With the simulation more and more closely capturing the deformation behavior of the real material:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "27d4eaf4-6963-4b89-8e92-89a66de26c39",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sim 0 iter 0... \n",
      "Sim 0 iter 1... \n",
      "Sim 1 iter 0... \n",
      "Sim 1 iter 1... \n",
      "Sim 2 iter 0... \n",
      "Sim 2 iter 1... \n",
      "Sim 3 iter 0... \n",
      "Sim 3 iter 1... \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x150eb7443610>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "plt.figure(1)\n",
    "plt.plot(exp_strain, exp_stress/1e6,\n",
    "         color='k',\n",
    "         linestyle=\"dotted\",\n",
    "         label=\"Measured\")\n",
    "\n",
    "for e, sim in enumerate(workflow.tasks.simulate_VE_loading_damask.elements):\n",
    "    for i, itr in enumerate(sim.iterations):\n",
    "        print(f\"Sim {e} iter {i}... \")\n",
    "\n",
    "        VE_response = itr.outputs.VE_response.value\n",
    "        sim_stress = np.array(VE_response['volume_data']['vol_avg_stress']['data'])\n",
    "        sim_strain = np.array(VE_response['volume_data']['vol_avg_strain']['data'])\n",
    "\n",
    "\n",
    "        plt.plot(sim_strain[:,0,0], sim_stress[:,0,0]/1e6,\n",
    "                 linestyle=\"solid\",\n",
    "                 label=f\"Sim {e} itr {i}\")\n",
    "\n",
    "plt.legend()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23f02135-52ca-4463-bf37-974e1f6de935",
   "metadata": {},
   "source": [
    "## Plot regression value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7f0c886b-b546-484b-8d41-b0485d3a347a",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "damask-venv",
   "language": "python",
   "name": "damask-venv"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
